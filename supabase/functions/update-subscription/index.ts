
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

serve(async (req) => {
  // Handle CORS
  if (req.method === "OPTIONS") {
    return new Response("ok", { headers: corsHeaders });
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get("SUPABASE_URL") ?? "",
      Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") ?? ""
    );

    // Parse the request body
    const { payment_id, user_id, plan_type = "pro", email } = await req.json();

    console.log("=== IN√çCIO DO PROCESSAMENTO ===");
    console.log("Processando atualiza√ß√£o de assinatura:", {
      user_id,
      email,
      plan_type,
      payment_id
    });

    // Verificar se √© um ID de teste (sempre aprovado)
    const isTestTransaction = payment_id && payment_id.startsWith("TEST_TRANSACTION_");
    if (isTestTransaction) {
      console.log("üß™ ID de transa√ß√£o de teste detectado - aprovando automaticamente:", payment_id);
    }

    let finalUserId = user_id;
    let userProfile = null;

    // Se n√£o temos user_id mas temos email, buscar o usu√°rio
    if (!finalUserId && email) {
      console.log("üîç Buscando usu√°rio pelo email:", email);
      
      const { data: profile, error: profileError } = await supabaseClient
        .from("profiles")
        .select("id, email")
        .eq("email", email)
        .maybeSingle();

      if (profileError) {
        console.error("‚ùå Erro ao buscar perfil por email:", profileError);
        return new Response(
          JSON.stringify({ error: "Erro ao buscar dados do usu√°rio por email: " + profileError.message }),
          { status: 400, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }

      if (profile) {
        finalUserId = profile.id;
        userProfile = profile;
        console.log("‚úÖ Usu√°rio encontrado pelo email:", userProfile);
      }
    }

    if (!finalUserId) {
      console.error("‚ùå User ID ou email √© obrigat√≥rio");
      return new Response(
        JSON.stringify({ error: "User ID ou email √© obrigat√≥rio para ativar o plano" }),
        { status: 400, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    // Se ainda n√£o temos o perfil, buscar pelo user_id
    if (!userProfile) {
      console.log("üîç Verificando se usu√°rio existe pelo ID...");
      const { data: profile, error: userError } = await supabaseClient
        .from("profiles")
        .select("id, email")
        .eq("id", finalUserId)
        .maybeSingle();
        
      if (userError) {
        console.error("‚ùå Erro ao verificar usu√°rio:", userError);
        return new Response(
          JSON.stringify({ error: "Erro ao verificar usu√°rio: " + userError.message }),
          { status: 400, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }

      userProfile = profile;
    }

    // Se o usu√°rio n√£o existe na tabela profiles, criar o perfil
    if (!userProfile) {
      console.log("‚ûï Criando perfil para o usu√°rio...");
      const { data: newProfile, error: createError } = await supabaseClient
        .from("profiles")
        .insert({
          id: finalUserId,
          email: email || null
        })
        .select("id, email")
        .single();
        
      if (createError) {
        console.error("‚ùå Erro ao criar perfil:", createError);
        return new Response(
          JSON.stringify({ error: "Erro ao criar perfil do usu√°rio: " + createError.message }),
          { status: 400, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }
      
      userProfile = newProfile;
      console.log("‚úÖ Perfil criado com sucesso:", userProfile);
    } else {
      console.log("‚úÖ Usu√°rio encontrado:", userProfile);
    }
    
    // Verificar se o usu√°rio j√° tem uma assinatura
    console.log("üîç Verificando assinatura existente...");
    const { data: existingSubscription, error: fetchError } = await supabaseClient
      .from("user_subscriptions")
      .select("*")
      .eq("user_id", finalUserId)
      .maybeSingle();
      
    if (fetchError) {
      console.error("‚ùå Erro ao buscar assinatura:", fetchError);
      return new Response(
        JSON.stringify({ error: "Erro ao buscar assinatura existente: " + fetchError.message }),
        { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    let result;
    let isNewSubscription = false;

    if (existingSubscription) {
      // Atualizar a assinatura existente
      console.log("üîÑ Atualizando assinatura existente...");
      const { data, error } = await supabaseClient
        .from("user_subscriptions")
        .update({
          plan_type,
          is_active: true,
          end_date: null,
          updated_at: new Date().toISOString(),
        })
        .eq("user_id", finalUserId)
        .select();
        
      if (error) {
        console.error("‚ùå Erro ao atualizar assinatura:", error);
        return new Response(
          JSON.stringify({ error: "Erro ao atualizar assinatura: " + error.message }),
          { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }
      
      result = data;
      console.log("‚úÖ Assinatura atualizada com sucesso");
    } else {
      // Criar uma nova assinatura
      console.log("‚ûï Criando nova assinatura...");
      const { data, error } = await supabaseClient
        .from("user_subscriptions")
        .insert({
          user_id: finalUserId,
          plan_type,
          is_active: true,
          payment_id: payment_id || null,
        })
        .select();
        
      if (error) {
        console.error("‚ùå Erro ao criar assinatura:", error);
        return new Response(
          JSON.stringify({ error: "Erro ao criar assinatura: " + error.message }),
          { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }
      
      result = data;
      isNewSubscription = true;
      console.log("‚úÖ Nova assinatura criada com sucesso");
    }

    // Criar notifica√ß√£o de boas-vindas para nova assinatura
    if (isNewSubscription) {
      console.log("üîî Criando notifica√ß√£o de boas-vindas...");
      const { error: notificationError } = await supabaseClient
        .from("notifications")
        .insert({
          user_id: finalUserId,
          title: "Bem-vindo ao Plano Pro!",
          message: isTestTransaction 
            ? "Sua assinatura de teste foi ativada com sucesso. Aproveite todos os recursos premium!" 
            : "Sua assinatura foi ativada com sucesso. Aproveite todos os recursos premium!",
          type: "subscription",
          is_read: false
        });
        
      if (notificationError) {
        console.error("‚ö†Ô∏è Erro ao criar notifica√ß√£o:", notificationError);
        // N√£o falha a opera√ß√£o por causa da notifica√ß√£o
      } else {
        console.log("‚úÖ Notifica√ß√£o de boas-vindas criada");
      }
    }

    console.log("üéâ PROCESSO FINALIZADO COM SUCESSO para usu√°rio:", finalUserId);
    console.log("=== FIM DO PROCESSAMENTO ===");
    
    return new Response(
      JSON.stringify({ 
        success: true, 
        message: isTestTransaction 
          ? "Assinatura de teste ativada com sucesso" 
          : "Assinatura atualizada com sucesso",
        subscription: result,
        isNewSubscription,
        user_info: userProfile,
        test_mode: isTestTransaction
      }),
      { status: 200, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  } catch (error) {
    console.error("üí• ERRO INESPERADO:", error);
    
    return new Response(
      JSON.stringify({ error: "Erro interno do servidor: " + error.message }),
      { status: 500, headers: { ...corsHeaders, "Content-Type": "application/json" } }
    );
  }
});
